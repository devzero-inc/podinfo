apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: default
data:
  master.cnf: |
    [mysqld]
    log-bin=mysql-bin
    binlog-format=ROW
  slave.cnf: |
    [mysqld]
    relay-log=relay-log
    read-only=1
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: default
  labels:
    app: mysql
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: default
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: bash:latest
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing slave.
            mv xtrabackup_slave_info change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -h 127.0.0.1 <<EOF
          $(<change_master_to.sql.orig),
            MASTER_HOST='mysql-0.mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp2
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "500Mi"
            cpu: "300m"
          requests:
            memory: "200Mi"
            cpu: "200m"
---
# Deployment 1: Replica count: 1; containers per pod: 1; req/limit defined
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-1-1-reqlim
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deploy-1-1-reqlim
  template:
    metadata:
      labels:
        app: deploy-1-1-reqlim
    spec:
      containers:
      - name: container
        image: docker.io/sandipandevzero/dakr-stress-single:latest
        imagePullPolicy: Always
        env:
        - name: CPU_CORES
          value: "2"
        - name: CPU_LOAD
          value: "30"
        - name: CPU_DURATION
          value: "180"
        - name: RAM_MB
          value: "512"
        - name: RAM_DURATION
          value: "180"
        - name: SLEEP_MIN
          value: "120"
        - name: SLEEP_MAX
          value: "300"
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
---
# Deployment 2: Replica count: 1; containers per pod: 1; req defined only
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-1-1-req
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deploy-1-1-req
  template:
    metadata:
      labels:
        app: deploy-1-1-req
    spec:
      containers:
      - name: container
        image: docker.io/sandipandevzero/dakr-stress-single:latest
        imagePullPolicy: Always
        env:
        - name: CPU_CORES
          value: "2"
        - name: CPU_LOAD
          value: "30"
        - name: CPU_DURATION
          value: "180"
        - name: RAM_MB
          value: "512"
        - name: RAM_DURATION
          value: "180"
        - name: SLEEP_MIN
          value: "120"
        - name: SLEEP_MAX
          value: "6000"
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
---
# Deployment 3: Replica count: 1; containers per pod: 1; lim defined only
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-1-1-lim
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deploy-1-1-lim
  template:
    metadata:
      labels:
        app: deploy-1-1-lim
    spec:
      containers:
      - name: container
        image: docker.io/sandipandevzero/dakr-stress-single:latest
        imagePullPolicy: Always
        env:
        - name: CPU_CORES
          value: "2"
        - name: CPU_LOAD
          value: "30"
        - name: CPU_DURATION
          value: "180"
        - name: RAM_MB
          value: "512"
        - name: RAM_DURATION
          value: "180"
        - name: SLEEP_MIN
          value: "120"
        - name: SLEEP_MAX
          value: "6000"
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: default
---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: default
spec:
  containers:
    - name: test-container
      image: nginx:latest
      ports:
        - containerPort: 80
      resources:
        requests:
          cpu: 200m
          memory: 200Mi
        limits:
          cpu: 300m
          memory: 300Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-deployment
  template:
    metadata:
      labels:
        app: test-deployment
    spec:
      containers:
        - name: test-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 300Mi
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: test-replicaset
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-replicaset
  template:
    metadata:
      labels:
        app: test-replicaset
    spec:
      containers:
        - name: test-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 300Mi
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: test-daemonset
  namespace: default
spec:
  selector:
    matchLabels:
      app: test-daemonset
  template:
    metadata:
      labels:
        app: test-daemonset
    spec:
      containers:
        - name: test-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 300Mi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: test-job
  namespace: default
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: test-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 300Mi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: test-cronjob
  namespace: default
spec:
  schedule: "*/1 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: test-container
              image: nginx:latest
              ports:
                - containerPort: 80
              resources:
                requests:
                  cpu: 200m
                  memory: 200Mi
                limits:
                  cpu: 300m
                  memory: 300Mi
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: test-replicationcontroller
  namespace: default
spec:
  replicas: 1
  selector:
    app: test-replicationcontroller
  template:
    metadata:
      labels:
        app: test-replicationcontroller
    spec:
      containers:
        - name: test-container
          image: nginx:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 300Mi
---
